package RideFlow::DB::Result::Attributes::[% model_name %];

use Moose;
use MooseX::MarkAsMethods autoclean => 1;

extends 'RideFlow::DB::Result';

__PACKAGE__->table('[% model.item('x-dbic-table') %]');
__PACKAGE__->add_columns(
[% FOREACH property = model.properties.keys; -%]
    [%- NEXT IF model.properties.$property.item('x-dbic-rel') -%]
    '[% property %]' => {
        data_type => '[% pg_attr_type(property, model.properties.$property) %]',
        [% IF model.properties.$property.enum -%]
        extras    => [ '[% model.properties.$property.enum.join("','") %]' ],
        [% END -%]
    },
[% END -%]
);

# Relationships
[%- FOREACH property = model.properties.keys;
    p = model.properties.$property;
    other_model = p.type == 'array' ? p.items.item('$ref') : p.item('$ref');
    other_model = other_model.replace('#/definitions/','');
%]
    [% NEXT UNLESS p.item('x-dbic-rel') %]
    [% IF p.item('x-dbic-rel') == 'many_to_many' %]
    __PACKAGE__->many_to_many (
        '[% property %]',
        '[% p.item('x-dbic-bridge-name') %]',
        '[% p.item('x-dbic-them') %]'
    );
    __PACKAGE__->has_many (
        '[% p.item('x-dbic-bridge-name') %]',
        'RideFlow::DB::Result::[% p.item('x-dbic-bridge').replace('#/definitions/','') %]',
        '[% p.item('x-dbic-me') %]'
    );
    [% ELSE %]
    __PACKAGE__->[% p.item('x-dbic-rel') %](
        '[% property %]',
        'RideFlow::DB::Result::[% other_model %]',
        '[% p.item('x-dbic-key') %]'
    );
    [% END %]
[% END -%]

__PACKAGE__->meta->make_immutable;

1;