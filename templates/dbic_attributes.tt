package RideFlow::DB::Result::Attributes::[% model_name %];
# AUTOGENERATED FILE - do not modify directly

use Moose;
use MooseX::MarkAsMethods autoclean => 1;

extends 'RideFlow::DB::Result';

__PACKAGE__->table('[% model.item('x-dbic-table') %]');
__PACKAGE__->add_columns(
[%
uniques = [];
FOREACH property = model.properties.keys;
    p = model.properties.$property;

    NEXT IF p.item('x-dbic-ignore');

    IF p.item('x-unique');
        uniques.push(property);
    END;

    IF p.item('x-dbic-rel');
        IF p.item('x-dbic-rel') == 'belongs_to';
%]
    '[% p.item('x-dbic-key') %]' => {
        data_type => 'uuid',
        is_foreign_key => 1,
    },
[%
        END;
    ELSE;
-%]
    '[% property %]' => {
        data_type => '[% pg_attr_type(property, model.properties.$property) %]',
        [% IF model.properties.$property.enum -%]
        extras => [ '[% model.properties.$property.enum.join("','") %]' ],
        [% END -%]
        [%- IF property == model.item('x-dbic-key') || p.item('x-unique') %]
        is_nullable => 0,
        [% END %]
    },
[%
    END;
END
-%]
);

[%
IF model.item('x-dbic-key') %]
__PACKAGE__->set_primary_key('[% model.item('x-dbic-key').join("','") %]');
[%
END;

FOREACH unique IN uniques;
%]
__PACKAGE__->add_unique_constraint( [% unique %] => ['[% unique %]'] );
[%
END;
-%]

# Relationships
[%
FOREACH property = model.properties.keys;
    p = model.properties.$property;
    other_model = p.type == 'array' ? p.items.item('$ref') : p.item('$ref');
    other_model = other_model.replace('#/definitions/','');

    NEXT UNLESS p.item('x-dbic-rel');

    IF p.item('x-dbic-rel') == 'many_to_many'
-%]
    __PACKAGE__->many_to_many (
        '[% property %]',
        '[% p.item('x-dbic-bridge-name') %]',
        '[% p.item('x-dbic-them') %]',
    );
    __PACKAGE__->has_many (
        '[% p.item('x-dbic-bridge-name') %]',
        'RideFlow::DB::Result::[% p.item('x-dbic-bridge').replace('#/definitions/','') %]',
        '[% p.item('x-dbic-key') %]',
        { cascade_delete => 0 },
    );
[%
    ELSE
-%]
    __PACKAGE__->[% p.item('x-dbic-rel') %](
        '[% property %]',
        'RideFlow::DB::Result::[% other_model %]',
        '[% p.item('x-dbic-key') %]',[%
        IF p.item('x-dbic-rel').match('might_have|has_many'); %]
        { cascade_delete => 0 },[%
        END;
        %]
    );
[%
    END;
END;
-%]

__PACKAGE__->meta->make_immutable;

1;