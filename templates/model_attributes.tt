[%
openapi_to_moose_types = {
    boolean => 'Bool',
    string  => 'Str',
    number  => 'Num',
    integer => 'Int',
};

MACRO attr_type(property,embedded) BLOCK;
    IF property.item('$ref') == '#/definitions/location';
        embedded ? "ArrayRef[Num]" : "'ArrayRef[Num]'";
    ELSIF property.item('$ref');
        class = property.item('$ref').replace('((.+?)/)+','');
        embedded ? 'RideFlow::Model::' _ class : "'Maybe[RideFlow::Model::" _ class _ "]'";
    ELSIF property.type == 'string';
        IF property.enum;
            embedded ? 'Str' : "enum(['" _ property.enum.join("','") _ "'])";
        ELSIF property.format == 'date' || property.format == 'date-time';
            embedded ? "DateTime" : "'Maybe[DateTime]'";
        ELSE;
            embedded ? "Str" : "'Maybe[Str]'";
        END;
    ELSIF property.type == 'array';
        "'" UNLESS embedded;
        IF property.item('x-dbic-rel');
            class = property.items.item('$ref').replace('((.+?)/)+','');
            "ArrayRef[RideFlow::Model::" _ class _ "]";
        ELSE;
            "ArrayRef[";
                attr_type(property.items,1);
            "]";
        END;
        "'" UNLESS embedded;
    ELSE;
        "'Maybe[" UNLESS embedded;
        openapi_to_moose_types.${property.type};
        "]'" UNLESS embedded;
    END;
END;

-%]
package RideFlow::Model::Attributes::[% model_name %];
# AUTOGENERATED FILE - do not modify directly

use Moose;
use Moose::Util::TypeConstraints 'enum';
use UUID 'uuid';

extends 'RideFlow::Model::Base';

sub dbic { 'RideFlow::DB::Result::[% model_name %]' }

[% FOREACH property = model.properties.keys; p = model.properties.$property %]
has '[% property %]' => (
    is => '[% p.readOnly ? 'ro' : 'rw' %]',
    isa => [% attr_type(p) %],[%


    IF p.format == 'uuid';
        "\n    lazy => 1,\n    default => sub { uuid() },";
    ELSIF p.type == 'array';
        "\n    default => sub { [] },";
    END;

    IF p.item('x-dbic-rel');
        "\n    traits => ['DBIC','Envoy'],";
        "\n    rel    => '" _ p.item('x-dbic-rel') _ "',";
        "\n    mm_rel => '" _ p.item('x-dbic-bridge-name') _ "'," IF p.item('x-dbic-rel') == 'many_to_many';
    ELSE;
        "\n    traits => ['DBIC']," UNLESS p.item('x-dbic-ignore');
    END;

    "\n    primary_key => 1," IF model.item('x-dbic-key') == property;


 %]
);
[% END %]

1;